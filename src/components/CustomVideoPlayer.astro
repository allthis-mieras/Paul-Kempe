---
import { urlForImage } from "../sanity/lib/urlForImage";
const {
  class: className,
  videoUrlDesktop,
  videoUrlMobile,
  posterImage,
  aspectRatio,
  ...rest
} = Astro.props;
---

<div data-cursor="video">
  <video
    id="video"
    muted
    autoplay
    loop
    playsinline
    style={`--aspect-ratio: ${aspectRatio}`}
    class={`video ${className}`}
    poster={urlForImage(posterImage).url()}
    data-desktop-vid={videoUrlDesktop}
    data-mobile-vid={videoUrlMobile}
    {...rest}
  >
    Your browser does not support the video tag.
  </video>
  <button id="audio-control" class="button muted">Unmute</button>
</div>

<style lang="scss">
  .responsive-video {
    display: flex;
    flex-direction: column;
  }

  video {
    aspect-ratio: var(--aspect-ratio);
    width: 100%;
    height: auto;

    &[poster] {
      object-fit: cover;
      width: 100%;
      height: 100%;
    }
  }

  .desktop-video {
    display: none;
    aspect-ratio: 16 / 9;
  }

  .mobile-video {
    display: block;
    aspect-ratio: 9 / 16;
  }

  .button {
    display: none;
  }

  @media (min-width: 768px) {
    .desktop-video {
      display: block;
    }
    .mobile-video {
      display: none;
    }

    .button {
      display: none;
    }
  }
</style>

<script is:inline>
  function initializeVideoPlayer() {
    const video = document.getElementById("video");
    const audioControlButton = document.getElementById("audio-control");
    const cursorIcon = document.querySelector(".cursor-icon");

    if (!video) return;

    /**
     * Toggle mute/unmute state for the video
     */
    const toggleMute = () => {
      video.muted = !video.muted;
      updateIcons();
    };

    /**
     * Update cursor and audio control button based on mute status
     */
    const updateIcons = () => {
      const iconSrc = video.muted ? "/icon-on.svg" : "/icon-mute.svg";
      if (cursorIcon) cursorIcon.src = iconSrc;
      if (audioControlButton)
        audioControlButton.textContent = video.muted ? "Unmute" : "Mute";
    };

    /**
     * Event listener for video click
     */
    video.addEventListener("click", toggleMute);

    /**
     * Update cursor on video hover
     */
    video.addEventListener("mousemove", () => {
      const cursor = document.querySelector(".cursor");
      if (cursor) {
        cursor.classList.add("grow");
        cursor.style.backgroundColor = "transparent";
      }
      if (cursorIcon) {
        cursorIcon.style.display = "block";
        cursorIcon.src = video.muted ? "/icon-on.svg" : "/icon-mute.svg";
      }
    });

    /**
     * Reset cursor when mouse leaves the video
     */
    video.addEventListener("mouseleave", () => {
      const cursor = document.querySelector(".cursor");
      if (cursor) {
        cursor.classList.remove("grow");
        cursor.style.backgroundColor = "red";
      }
      if (cursorIcon) {
        cursorIcon.style.display = "none";
      }
    });

    /**
     * Handle click on the audio control button
     */
    if (audioControlButton) {
      audioControlButton.addEventListener("click", (e) => {
        e.preventDefault();
        toggleMute();
      });
    }

    /**
     * Dynamically add source to video based on window width
     */
    const addSourceToVideo = (element, src) => {
      const source = document.createElement("source");
      source.src = src;
      source.type = "video/mp4";
      element.appendChild(source);
    };

    /**
     * Determine which video (desktop or mobile) to load
     */
    const whichSizeVideo = (element, src) => {
      const windowWidth =
        window.innerWidth || document.documentElement.clientWidth;
      if (windowWidth > 1200) {
        addSourceToVideo(element, src.dataset.desktopVid);
      } else {
        addSourceToVideo(element, src.dataset.mobileVid);
      }
    };

    /**
     * Initialize video size
     */
    const videoSize = () => {
      whichSizeVideo(video, video);
    };

    videoSize();
  }

  document.addEventListener("astro:page-load", initializeVideoPlayer);
  document.addEventListener("astro:after-swap", initializeVideoPlayer);
</script>
